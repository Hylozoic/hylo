# The currently logged-in person.
type Me {
  id: ID
  name: String
  email: String
  avatarUrl: String
  bannerUrl: String
  bio: String
  twitterName: String
  linkedinUrl: String
  facebookUrl: String
  url: String
  location: String
  tagline: String
  hasDevice: Boolean
  memberships(first: Int, cursor: ID, order: String): [Membership]
  membershipsTotal: Int
  communities(first: Int, cursor: ID, order: String): [Membership]
  communitiesTotal: Int
  posts(first: Int, cursor: ID, order: String): [Post]
  postsTotal: Int
  messageThreads(first: Int, cursor: ID, order: String): [MessageThread]
  messageThreadsTotal: Int
  updatedAt: String
  topicSubscriptions(first: Int, order: String, offset: Int, communityId: ID): TopicSubscriptionQuerySet
}

type TopicSubscriptionQuerySet {
  total: Int
  hasMore: Boolean
  items: [TopicSubscription]
}

type TopicSubscription {
  id: ID
  topic: Topic
  newPostCount: Int
}

type Topic {
  id: ID
  name: String
}

type Person {
  id: ID
  name: String
  avatarUrl: String
  bannerUrl: String
  bio: String
  twitterName: String
  linkedinUrl: String
  facebookUrl: String
  url: String
  location: String
  tagline: String
  comments(first: Int, cursor: ID, order: String): [Comment]
  commentsTotal: Int
  memberships(first: Int, cursor: ID, order: String): [Membership]
  membershipsTotal: Int
  posts(first: Int, cursor: ID, order: String): [Post]
  postsTotal: Int
  votes(first: Int, cursor: ID, order: String): [Vote]
  votesTotal: Int
}

type Membership {
  id: ID
  role: Int
  hasModeratorRole: Boolean
  createdAt: String
  lastViewedAt: String
  community: Community
}

type Community {
  id: ID
  name: String
  slug: String
  description: String
  createdAt: String
  avatarUrl: String
  bannerUrl: String
  members(first: Int, order: String, sortBy: String, offset: Int, search: String): PersonQuerySet
  posts(
    first: Int,
    order: String,
    sortBy: String,
    offset: Int,
    search: String,
    filter: String
  ): PostQuerySet
  popularSkills(first: Int): [String]
  memberCount: Int
  postCount: Int
  feedItems(first: Int, cursor: ID, order: String): [FeedItem]
  feedItemsTotal: Int
  moderators(first: Int, cursor: ID, order: String): PersonQuerySet
}

type PersonQuerySet {
  total: Int
  hasMore: Boolean
  items: [Person]
}

type PostQuerySet {
  total: Int
  hasMore: Boolean
  items: [Post]
}

type FeedItem {
  type: String
  content: FeedItemContent
}

union FeedItemContent = Post | Interstitial

type Interstitial {
  text: String
}

type Post {
  id: ID
  title: String
  details: String
  type: String
  createdAt: String
  updatedAt: String
  public: Boolean
  fulfilledAt: String
  startsAt: String
  endsAt: String
  location: String
  creator: Person
  followers(first: Int, cursor: ID, order: String): [Person]
  followersTotal: Int
  communities(first: Int, cursor: ID, order: String): [Community]
  communitiesTotal: Int
  comments(first: Int, cursor: ID, order: String): CommentQuerySet
  commenters(first: Int): [Person]
  commentersTotal: Int
  linkPreview: LinkPreview
  votesTotal: Int
}

type CommentQuerySet {
  total: Int
  hasMore: Boolean
  items: [Comment]
}

type Comment {
  id: ID
  text: String
  creator: Person
  post: Post
  createdAt: String
  createdFrom: String
}

type MessageThread {
  id: ID
  createdAt: String
  updatedAt: String
  participants(first: Int, cursor: ID, order: String): [Person]
  participantsTotal: Int
  messages(first: Int, cursor: ID, order: String): MessageQuerySet
  unreadCount: Int
  lastReadAt: String
}

type MessageQuerySet {
  total: Int
  hasMore: Boolean
  items: [Message]
}

type Message {
  id: ID
  text: String
  creator: Person
  messageThread: MessageThread
  createdAt: String
}

type Vote {
  id: ID
  post: Post
  voter: Person
  createdAt: String
}

type Query {
  me: Me
  person(id: ID): Person
  community(id: ID, slug: String): Community
  messageThread(id: ID): MessageThread
  post(id: ID): Post
  posts(
    first: Int,
    order: String,
    sortBy: String,
    offset: Int,
    search: String,
    filter: String
  ): PostQuerySet
  people(
    first: Int,
    order: String,
    sortBy: String,
    offset: Int,
    search: String,
    autocomplete: String,
    filter: String
  ): PersonQuerySet
}

input MeInput {
  name: String
  email: String
  avatarUrl: String
  bannerUrl: String
  bio: String
  url: String
  twitterName: String
  linkedinUrl: String
  facebookUrl: String
  location: String
  tagline: String
}

input PostInput {
  title: String
  details: String
  type: String
  communityIds: [String]
  public: Boolean
  startsAt: String
  endsAt: String
  location: String
}

input CommentInput {
  text: String
  imageUrl: String
  postId: String
  parentCommentId: String
}

input MessageInput {
  text: String
  messageThreadId: String
}

input MessageThreadInput {
  participantIds: [String]
}

type Mutation {
  updateMe(changes: MeInput): Me
  createPost(data: PostInput): Post
  findOrCreateThread(data: MessageThreadInput): MessageThread
  createComment(data: CommentInput): Comment
  createMessage(data: MessageInput): Message
  leaveCommunity(id: ID): ID
}

type LinkPreview {
  id: ID
  title: String
  url: String
  imageUrl: String
}

type Tag {
  id: ID
  name: String
  newPostCount: Int
}
